// TODO: get the join tree generated by LMFAO rather than
// using the mock data
import {
  mockJoinTree
} from "./mockdata/mockJoinTree"
import {
  view
} from "paper"
// import _ from lodash
const _ = require("lodash")

const generateJoinTreeD3 = mockJoinTree => {
  // get the join tree json
  const joinTreeD3 = {
    ...mockJoinTree,
    nodes: mockJoinTree.relations.map(relation => {
      return {
        id: relation.name,
        output: relation.output
      }
    }),
    links: mockJoinTree.edges.filter(edge => edge.origin !== edge.dest).map(edge => {
      return {
        weight: edge.views.length,
        views: edge.views,
        source: edge.origin,
        target: edge.dest,
      }
    }),
    groupNodes: mockJoinTree.groups.map(group => {
      return {
        id: group.name,
        views: group.views,
        base: group.base
      }
    }),
    groupEdges: mockJoinTree.groupEdges.map(groupEdge => {
      return {
        weight: 1,
        views: groupEdge.views,
        source: groupEdge.origin,
        target: groupEdge.dest,
      }
    }),
    views: mockJoinTree.views.map(view => {
      return {
        name: view.name,
        title: `View ${view.name}`,
        expand: false,
        children: [{
            title: `Group By: `+view.groupby.join(", "),
            expand: false,
            // children: view.groupby.map(v => {
            //   return {
            //     title: v
            //   }
            // })
          },
          {
            title: `Aggregates: `+view.aggregates.join(", "),
            expand: false,
            // children: view.aggregates.map(agg => {
            //   return {
            //     title: agg
            //   }
            // })
          },
          {
            title: `Join: `+view.join.join(" \u22C8 "),
            expand: false,
            // children: query.aggregates.map(agg => {
            //   return {
            //     title: agg
            //   }
            // })
          }
        ]
      }
    }),
    queries: mockJoinTree.queries.map(query => {
      return {
        ...query,
        title: `${query.name}`,
        expand: false,
        contextmenu: true,
        children: [{
            title: `Group By: `+query.groupby.join(", "),
            expand: false,
            // children: query.groupby.map(v => {
            //   return {
            //     title: v
            //   }
            // })
          },
          {
            title: `Aggregates: `+query.aggregates.join(", "),
            expand: false,
            // children: query.aggregates.map(agg => {
            //   return {
            //     title: agg
            //   }
            // })
          }
        ]
      }
    })
  }

  return joinTreeD3
}



export {
  // joinTreeD3,
  generateJoinTreeD3,
}



// "relations": [
// 	{"name" : "Inventory"},
// 	{"name" : "Stores"},
// 	{"name" : "Weather"},
// 	{"name" : "Items"}
// ],
// "edges": [
// 	{
// 	"origin" : "Stores", 
// 	"dest" : "Inventory",
// 	"views" : ["V1", "V2"] 
// 	},
// 	{
// 	"origin" : "Weather", 
// 	"dest" : "Inventory",
// 	"views" : ["V3", "V4", "V5"] 
// 	},