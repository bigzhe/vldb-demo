// TODO: get the join tree generated by LMFAO rather than
// using the mock data
import {
  mockJoinTree
} from "./mockdata/mockJoinTree"
import { view } from "paper"
// import _ from lodash
const _ = require("lodash")

// get the join tree json
const joinTreeD3 = {
  ...mockJoinTree,
  nodes: mockJoinTree.relations.map(relation => {
    return {id: relation.name}
  }),
  links: mockJoinTree.edges.filter(edge => edge.origin !== edge.dest).map(edge => {
    return {
      weight: edge.views.length, 
      views: edge.views,
      source: edge.origin,
      target: edge.dest,
    }
  }),
  views: mockJoinTree.views.map(view => {
    return {
      name: view.name,
      title: `View ${view.name}`,
      expand: true,
      children: [
        {
          title: `Group By Variables`,
          expand: false,
          children: view.groupby.map(v => {
            return {title: v}
          })
        },
        {
          title: `Aggregates`,
          expand: false,
          children: view.aggregates.map(agg => {
            return {title: `SUM(${agg})`}
          })
        }
      ]
    }
  }),
  queries: mockJoinTree.queries.map(query => {
    return {
      ...query,
      title: `${query.name}`,
      expand: false,
      children: [
        {
          title: `Group By Variables`,
          expand: false,
          children: query.groupby.map(v => {
            return {title: v}
          })
        },
        {
          title: `Aggregates`,
          expand: false,
          children: query.aggregates.map(agg => {
            return {title: agg}
          })
        }
      ]
    }
  })
}

export {
  joinTreeD3
}



// "relations": [
// 	{"name" : "Inventory"},
// 	{"name" : "Stores"},
// 	{"name" : "Weather"},
// 	{"name" : "Items"}
// ],
// "edges": [
// 	{
// 	"origin" : "Stores", 
// 	"dest" : "Inventory",
// 	"views" : ["V1", "V2"] 
// 	},
// 	{
// 	"origin" : "Weather", 
// 	"dest" : "Inventory",
// 	"views" : ["V3", "V4", "V5"] 
// 	},