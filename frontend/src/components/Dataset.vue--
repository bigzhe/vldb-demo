<template>
  <div>
    
    <Row>
      Dataset:  
      <Select placeholder="Please select a dataset" v-model="selected_dataset_name" style="width:200px">
        <OptionGroup :key="i" v-for="(category, i) in dataset_categories" :label="category">
          <Option v-for="(d,i) in dataset.filter(d => d.category == category)" :value="d.name" :key="i">{{ d.name }}</Option>
        </OptionGroup>
      </Select>
    </Row>
    <!-- <br> -->
    
    <Divider></Divider>
    
    <!-- <div style="margin-top: 5px;">
      Query:
      <p>Q_Retailer() = <strong>Inventory</strong>(<span style="color: #3366ff;">locn</span>, <span style="color: #3366ff;">dateid</span>, <span style="color: #3366ff;">ksn</span>, inventoryunits),</p>
<p><strong>Location</strong>(<span style="color: #3366ff;">locn</span>, <span style="color: #3366ff;">zip</span>, rgn_cd, clim_zn_nbr, tot_area_sq_ft, sell_area_sq_ft, avghhi, supertargetdistance, supertargetdrivetime, targetdistance, targetdrivetime, walmartdistance, walmartdrivetime, walmartsupercenterdistance, walmartsupercenterdrivetime),</p>
<p><strong>Census</strong>(<span style="color: #3366ff;">zip</span>, population, white, asian, pacific, black, medianage, occupiedhouseunits, houseunits, families, households, husbwife, males, females, householdschildren, hispanic),</p>
<p><strong>Item</strong>(<span style="color: #3366ff;">ksn</span>, subcategory, category, categoryCluster, prize),</p>
<p><strong>Weather</strong>(<span style="color: #3366ff;">locn</span>, <span style="color: #3366ff;">dateid</span>, rain, snow, maxtemp, mintemp, meanwind, thunder)</p>
    </div> -->
    <!-- <div style="margin-top: 5px;">{{query_text}}</div> -->

    <Row style="margin-top: 5px; margin-bottom: 5px; border-bottom: 1px solid #e9e9e9;" :key="relation.name" v-for="relation in
    query.relations">
    
      <div >
        <Checkbox
                :indeterminate="relation.indeterminate"
                :value="relation.checkAll"
                @click.prevent.native="handleCheckAll(relation)">
          <strong>{{relation.name}}</strong>
        </Checkbox>
      </div>
      <CheckboxGroup v-model="relation.selected_variables" @on-change="checkAllGroupChange(relation)">
        <Checkbox :key="variable" v-for="variable in relation.variables" :label="variable"></Checkbox>
      </CheckboxGroup>
    </Row>

    <div v-if="selected_dataset_name != null">
      <Row>
        <div>
          <Checkbox
                  :indeterminate="query.free_variable_relation.indeterminate"
                  :value="query.free_variable_relation.checkAll"
                  @click.prevent.native="handleCheckAll(query.free_variable_relation)">
            <strong>{{query.free_variable_relation.name}}</strong>
          </Checkbox>
        </div>
        <CheckboxGroup v-model="query.free_variable_relation.selected_variables"
                       @on-change="checkAllGroupChange(query.free_variable_relation)">
          <Checkbox :key="variable" v-for="variable in query.free_variable_relation.variables" :label="variable"></Checkbox>
        </CheckboxGroup>
      </Row>
      <Divider></Divider>
      <Row>
        <!-- <Col span="24">
          Q_{{query.name}}({{this.query.free_variable_relation.selected_variables.join(", ")}}) =
          <span :key="relation.name" v-for="(relation,i) in query.relations.filter(r => r.selected)">
            <br>
            <strong>{{relation.name}}</strong>
            ({{relation.selected_variables.join(", ")}})
            {{i === query.relations.length-1 ? "" : ","}}
          </span>

        </Col> -->
        <Col>{{query_text}}</Col>

      </Row>
      <br>
      <Button type="primary" @click="handleNext">Next</Button>
    </div>

  </div>
</template>

<script lang="ts">
  import {Component, Watch, Vue} from "vue-property-decorator";
  import {RelationInfo, QueryInfo} from "../types/Query";
  import "../util/ArrayExtensions"

  @Component({})
  export default class Dataset extends Vue {
    // data
    selected_dataset_name: string | null = null
    query: QueryInfo = {name: "", relations: [], free_variable_relation:{name: "Free variables", variables: []}}

    get dataset(): { name: string; category: string; relations: RelationInfo[] }[] {
      return this.$store.state.dataset
    }

    get dataset_categories() {
      return this.dataset.map(d => d.category).unique()
    }

    get query_text(): string {
      if (!this.query || !this.query.free_variable_relation.selected_variables) return ""
      return `Q_${this.query.name}(${this.query.free_variable_relation.selected_variables.join(", ")})` + ` = ${this.query.relations.filter(r => r.selected).map(r =>
          `${r.name}(${r.selected_variables != undefined ? r.selected_variables.join(", ") : ""})`).join(", ")}`
    }

    @Watch('selected_dataset_name', { immediate: true, deep: true })
    onNameChanged(name: string) {
      // console.log(name)
      if (name == null) return
      const selected_dataset = this.dataset.find(d => d.name == name)
      if (!selected_dataset) return

      this.query = {
        name: selected_dataset.name,
        relations: selected_dataset.relations.map((relation: RelationInfo) => {
          return {
            ...relation,
            selected_variables: [...relation.variables],
            selected: true,
            indeterminate: false,
            checkAll: true
          }
        }),
        free_variable_relation: {
          ...this.query.free_variable_relation,
          variables: selected_dataset.relations.map((r: RelationInfo) => r.variables).flat().unique(),
          selected_variables: [],
          selected: true,
          indeterminate: false,
          checkAll: false
        }
      }
    }

    checkAllGroupChange(relation: RelationInfo) {
      if (relation.selected_variables == undefined)
        return

      relation.indeterminate = relation.selected_variables.length < relation.variables.length &&
        relation.selected_variables.length > 0
      relation.checkAll = relation.selected_variables.length == relation.variables.length
      relation.selected = relation.selected_variables.length > 0

    }

    handleCheckAll(relation: RelationInfo) {
      if (relation.indeterminate) {
        relation.checkAll = false;
      } else {
        relation.checkAll = !relation.checkAll;
      }
      relation.indeterminate = false;
      relation.selected = true

      if (relation.checkAll) {
        relation.selected_variables = [...relation.variables]
      } else {
        relation.selected_variables = [];
        relation.selected = false
      }
    }

    handleNext() {
      this.$store.commit("SET_QUERY_INFO", this.query)
      this.$store.commit("SET_QUERY_TEXT", this.query_text)

      this.$store.commit("SET_TAB", "strategy")
    }

  }


</script>

<style>
</style>